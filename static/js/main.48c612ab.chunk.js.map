{"version":3,"sources":["components/Burger/BurgerIngredients/BurgerIngredients.module.scss","components/Layout/Layout.module.scss","components/Burger/Burger.module.scss","hoc/Auxiliary.js","components/Layout/Layout.js","components/Burger/BurgerIngredients/BurgerIngredients.js","components/Burger/Burger.js","containers/BurgerBuilder/BurgerBuilder.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Auxiliary","props","children","Layout","className","classes","Content","BurgerIngredients","ingredient","this","type","BreadBottom","BreadTop","Seeds1","Seeds2","Meat","Cheese","Bacon","Salad","Component","Burger","BurgerBuilder","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","require","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.48c612ab.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"BreadBottom\":\"BurgerIngredients_BreadBottom__3t9t0\",\"BreadTop\":\"BurgerIngredients_BreadTop__3x-F3\",\"Seeds1\":\"BurgerIngredients_Seeds1__2vnSf\",\"Seeds2\":\"BurgerIngredients_Seeds2__1oY7y\",\"Meat\":\"BurgerIngredients_Meat__jY1WW\",\"Cheese\":\"BurgerIngredients_Cheese__1HKV6\",\"Salad\":\"BurgerIngredients_Salad__3WCGC\",\"Bacon\":\"BurgerIngredients_Bacon__32gar\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Content\":\"Layout_Content__1LP5c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Burger\":\"Burger_Burger__2qLP5\"};","const Auxiliary = (props) => props.children;\r\n\r\nexport default Auxiliary;\r\n","import React from \"react\";\r\nimport Auxiliary from \"../../hoc/Auxiliary\";\r\nimport classes from \"./Layout.module.scss\";\r\n\r\nconst Layout = props => (\r\n\t<Auxiliary>\r\n\t\t<div>Toolbar, Sidedrawer, Backdrop</div>\r\n\t\t<main className={classes.Content}>{props.children}</main>\r\n\t</Auxiliary>\r\n);\r\n\r\nexport default Layout;\r\n","import React, {Component} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport classes from \"./BurgerIngredients.module.scss\";\r\n\r\nclass BurgerIngredients extends Component {\r\n\trender() {\r\n\t\tlet ingredient = null;\r\n\r\n\t\tswitch (this.props.type) {\r\n\t\t\tcase \"bread-bottom\":\r\n\t\t\t\tingredient = <div className={classes.BreadBottom}></div>;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"bread-top\":\r\n\t\t\t\tingredient = (\r\n\t\t\t\t\t<div className={classes.BreadTop}>\r\n\t\t\t\t\t\t<div className={classes.Seeds1}></div>\r\n\t\t\t\t\t\t<div className={classes.Seeds2}></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"meat\":\r\n\t\t\t\tingredient = <div className={classes.Meat}></div>;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"cheese\":\r\n\t\t\t\tingredient = <div className={classes.Cheese}></div>;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"bacon\":\r\n\t\t\t\tingredient = <div className={classes.Bacon}></div>;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"salad\":\r\n\t\t\t\tingredient = <div className={classes.Salad}></div>;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tingredient = null;\r\n\t\t}\r\n\t\treturn ingredient;\r\n\t}\r\n}\r\n\r\nBurgerIngredients.propTypes = {\r\n\ttype: PropTypes.string.isRequired\r\n};\r\n\r\nexport default BurgerIngredients;\r\n","import React from \"react\";\r\nimport classes from \"./Burger.module.scss\";\r\nimport BurgerIngredients from \"./BurgerIngredients/BurgerIngredients\";\r\n\r\nconst Burger = props => {\r\n\treturn (\r\n\t\t<div className={classes.Burger}>\r\n\t\t\t<BurgerIngredients type=\"bread-top\" />\r\n\t\t\t<BurgerIngredients type=\"cheese\" />\r\n\t\t\t<BurgerIngredients type=\"meat\" />\r\n\t\t\t<BurgerIngredients type=\"salad\" />\r\n\t\t\t<BurgerIngredients type=\"bread-bottom\" />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Burger;\r\n","import React, {Component} from \"react\";\r\nimport Auxiliary from \"../../hoc/Auxiliary\";\r\nimport Burger from \"../../components/Burger/Burger\";\r\n\r\nclass BurgerBuilder extends Component{\r\n    render(){\r\n        return(\r\n            <Auxiliary>\r\n                <Burger/>\r\n                <div>Build control</div>\r\n            </Auxiliary>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BurgerBuilder;\r\n","import React, {Component} from \"react\";\nimport Layout from \"./components/Layout/Layout\";\nimport BurgerBuilder from \"./containers/BurgerBuilder/BurgerBuilder\";\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Layout>\n\t\t\t\t\t<BurgerBuilder></BurgerBuilder>\n\t\t\t\t</Layout>\n\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nrequire(\"typeface-roboto\");\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}